He generado otro porque se estaba haciendo muy largo y así compartimento que de angular bastantes notas voy a tomar

Angular tiene una forma de pensar parecida a la de react, funciona mediante modulos, cada modulo servirá para un propósito específico. Angular tiene cinco pilares fundamentales: Componentes, rutas, directivas, servicios y modulos. 

-Los componentes son como un bloque que tiene su segmento de html y una parte de typescript que suele ser una clase, como un componente de react, renderizas y la clase le da funcionalidad. 

-Los servicios ayudan a gestionar el estado son singletons, ya sabes objetos que solo se crea uno en la aplicación y su estado cambia y nos ayudan a no tener que usar redux y menos mal porque lo odio. Los servicios al final son lugares centralizados de información, nuestros componentes llaman al servicio para traer o cambiar información.

-Las directivas hay de tres tipos: de componentes, estructurales y de atributos. Las de componentes son como un componente pero tienen un html reutilizable, es decir pones la directiva donde quieras y ahí te pone el html, no entiendo la diferencia con el componente a no ser que el componente no implique logica solo html y typescript pero sin funciones. 
Las directivas estructurales modifican el dom añadiendo o quitando elementos. Las directivas de atributos cambian la apariencia o comportamiento de otro elemento. 

-Las rutas son el equivalente al react router dom, segun la url del navegador muestran unos componentes u otros

-Los modulos son cajas, un modulo tiene dentro componentes, rutas, directivas servicios, basicamente todo lo necesario para una funcionalidad, si quieres autentificar un usuario haces un modulo de autentificación que dentro le harás sus componentes, sus rutas, sus directivas y sus servicios. Si quieres otra funcionalidad otro modulo. Esto hace comodo y ordenado el desarrollo

Importante, hay modulos ya hechos que te puedes descargar, editarlos y te ahorras desarrollarlo desde cero, tipo quieres hacer un calendario interactivo lo mismo lo ha hecho ya alguien, lo descargas le metes tres estilos para que quede como quieres y a correr, yo prefiero hacerlo de cero que siempre se aprende pero bueno hay cosas tan complejas que mejor confiar en algo ya hecho que pasarte 6 meses desarrollándolo

Bien entramos ya a como se crea un proyecto, luego siempre se me olvida el código. 
CREAR PROYECTO DE ANGULAR: Se hace con angularcli, que lo instalamos al inicio, el comando para crear un proyecto de angular es: ng new nombredelproyecto te da un asistente preguntando si quieres instalar tal o cual tu palante como los de alicante

Ah mira, angular comprueba si ya tienes un git en la carpeta superior, en caso de tenerlo no te genera otro git como el cabron de react que luego subo las cosas y me manda a un git hijo y es un asco para el deploy 

Vale, angular como react genera un muchillón de archivos, no asustarse, lo importante está en src y como en react la mitad lo borraremos pero en el curso explican para qué sirve cada cosa lo voy a anotar y así lo tengo aquí para el futuro 

CORRER EL CODIGO DE ANGULAR: se usa el comando : ng serve -o
esto coge el codigo lo transpila a javascript, monta un servidor con webpack y el -o le dice que cuando esté que te lo abra oye que template por defecto más mona tiene angular
Nota, cuando tienes un json en este tipo de proyectos casi siempre son archivos de configuración, util saberlo
-LOS ARCHIVOS QUE GENERA: 
-Tsconfig.json incluye la configuración de typescript y le dice cómo quiere que lo traduzca a javascript. 
-tsconfigSpec.json: coge lo que viene en el config anterior y añade configuración para la parte de las pruebas y test 
-tsconfig.app.json: no suele tocarse pero es configuración sobre la app
-package.json, como en react están las dependencias y demás lo mejor es no tocarlo y si quieres añadir lo haces via comandos, con la excepción de scripts que ahí puedes poner los comandos que quieres que se ejecuten cuando haces ng start o ng build y tal, las dependencias si se suben al build final pero las devdependencies no, son para mientras la creas

-Angular.json: ESTE ES IMPORTANTE, tiene configuraciones de nuestra apps, como los assets, los styles para que lo inyecte en el html y demás.
-el gitignore bueno ya sé que hace

ARCHIVOS DENTRO DE SOURCE
En una primera vista tiene una carpeta app, assets, environment, el favicon, el index html, y main.ts
Dentro de app tenemos app component html y ts, incluye estilos y luego una plantilla html feisima porque tiene mucho svg y queda feo, pero esto lo borramos y ponemos nuestro hola mundo si ves aqui tienes app.component,css, app.component.html, app.component.specs.ts y app.component.ts todo esto son archivos que te hablan de un mismo componente el html da contenido el css da estilo a ese componente, el spec es de pruebas y lo puedes borrar. 
El ts es una clase de typescript con un decorador y la clase. 
El app.module es una clase con un decorador especial: @NgModule y dentro dice los modulos que componen la misma

La parte de los assets es para recursos estáticos, los environments son para añadir las variables de entorno, como el archivo .env de react creo. 

El index html es un html casi vacio pero tiene dentro un elemento llamado tal que así <app-root></app-root> no lo ha explicado aún pero en app.component.ts, su decorador dice: 
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
entiendo que selector dice el nombre con que se va a referir en el html, el templateurl dice el trozo de html que se va a meter ahí y el styleUrls los estilos

En src hay un styles.css esto es un archivo de estilos GLOBAL, válido para todo

VALE, el decorador component recibe argumentos en forma de objeto, uno es el selector, que es el nombre que tendrá el componente y es como lo referencias en el html, el templateurl dice la localización del archivo de html para mostrarlo, también puedes poner template a secas que lo que hace es que dentro del propio decorador le pones el html que quieres que se renderice. Yo prefiero tenerlo aparte más limpio.

Importante, en el html puedes usar variables de javascript, por ejemplo en el archivo component.ts tienes esto 
export class AppComponent {
  title = 'Contador App';
}
Para ponerlo te vas al component.html y pones:
<h1>{{title}}</h1>
Y ya te muestra el valor de esa variable, es como en react solo que con una llave más y en lugar de poner esta parte en el render la pones en otro archivo pero están conectados de hecho cuando estás en el html te sale un botoncito que dice go to component si lo pinchas te manda al componente ts que corresponde a ese html. Dentro de esas llaves puedes poner codigo javascript como en react, 
si pones <h2>{{1+2}}</h2>
Lo que se renderiza es: 3

Para disparar eventos en angular se usa una sintaxis especial, en la etiqueta html añades el evento entre paréntesis y le dices = "expresión javascript", curioso que no usa llaves ni nada, es directo, un ejemplo: 
<button (click) = " numero = numero +1 ">+1</button>
el (click) es lo que en react sería onClick, y lo que va entre comillas es lo que normalmente pondríamos entre llaves. Que curioso. aquí hay una lista con los nombres de cada evento : https://www.positronx.io/angular-8-events-list-for-event-binding/

Btw por algun motivo no admite la sintaxis numero += 1, ah vale sí se puede hacer pero no en el html en si, se hace en el componente, lo mejor es poner todo lo de lógica en el componente y luego lo llamas en el html
<button (click) = "sumar()">+1</button>

Para crear un componente se puede hacer manual o automático, está enseñando la manual, inicialmente creas un archivo.ts, por convención le das el nombre, le pones .component.ts o .service o .pipe así luego es más fácil ojear y ver qué es cada cosa. 

basicamente tu creas el componente usando el decorador component, pones la template del html que se va a ver, lo puedes definir en el mismo decorador o en un archivo aparte e indicar la dirección, creas tu clase para la lógica, esa clase lleva el export. Luego te vas a app.module.ts importas el componente y en ngmodule en declarations lo añades

Algo curioso es que angular permite usar setters y getters, esto crean una propiedad pero esa propiedad se procesa como funcion, no los confundas con los setters de java, en este caso el getter luce así: 
  get nombreCapitalizado (){
    return this.nombre.toUpperCase()
  }
pones get luego el nombre de la variable y la función, la función se ejecuta sola por lo que para llamarlo en html haces 
<p>{{nombreCapitalizado}}</p>
Como cualquier otra variable solo que esta hace alguna cosa antes de salir 

Lo de importar los componentes al modulo y tal es un coñazo, la manera rápida de crear un componente añadirlo al modulo y tal vas a la terminal y escribes: ng generate component (se puede abreviar como ng g c pero queda feo) y luego el nombre del componente y el path donde queremos que esté quedaría así: 

ng generate component heroes/listado

eso va a la carpeta heroes y crea un una carpeta listado que dentro tiene el componente listado no solo eso sino que además te crea el css el html la clase con su constructor su decorador y tal y te lo añade al modulo. Majísimo esto oye

Esto te lo crea ya con implements oninit, un constructor y un metodo ngoninit, este metodo es como el mount o el useeffect, se ejecuta cuando se crear el componente y se usa para inicializar variables, por ejemplo hacer una petición a la api cuando se monta el componente para asignar valores a tus variables y poder enseñarlo en pantalla

Las directivas estructurales cambian el dom , la directiva *ngFor permite crear un bucle for dentro del dom, por ejemplo si tienes un array de heroes puedes hacer esto: 
<ol>
  <li *ngFor="let heroe of heroes">
    {{heroe}}
  </li>
</ol>
el ngfor en li crea un li por cada elemento del array heroes, luego dentro con las doble llave le dices que se pinte y así lo ves 

*ngIf es otra directiva estructural que renderiza una cosa u otra según la condición
<div *ngIf="heroeBorrado != ''">
  <h3>Heroe borrado: {{heroeBorrado}}</h3>
</div>
esto por ejemplo solo renderiza el div cuando la condición se cumple 
También podemos hacer un else en este ngif, es un poco más raro que en react donde usamos el if y ya pero funciona así: 
<div *ngIf="heroeBorrado != ''; else noBorrado">
  <h3>Heroe borrado: {{heroeBorrado}}</h3>
</div>

<ng-template #noBorrado>
  <h3>No ha borrado nada</h3>
</ng-template>

el ngif mira la condición, luego está el else y lo otro es una referencia local, es decir el nombre de un elemento, este elemento debe ser un ng-template y le ponemos el nombre con # en la etiqueta, por tanto cuando la condición no se cumpla se renderiza el ngtemplate y cuando sí se renderiza lo otro

Los modulos no solo ayudan a organizar porque en un modulo pones todos los componentes necesarios para ese modulo, también ayudan para el lazyload porque tu puedes tener 100 modulos pero si el usuario no accede a la ruta en la que está ese modulo no hace falta cargarlo y perder rendimiento

Crear un modulo es casi como crear un componente, haces una clase, la exportas y usas el decorador @ngmodule. Ese decorador tiene un objeto con propiedades, la propiedad declarations es un array que dice los componentes de ese modulo, en imports van otros modulos que quiere que use. 
Luego para usarlo en la app tienes que ir a app.module y en sus imports importar el módulo, así no tienes que importar en app cada componente, lo haces en su respectivo módulo y luego le pasas la cajita entera a app y cada cosa en su lugar y ordenada y cuando necesitas trabajar en algo relacionado con ese modulo tu curras en tal modulo y no tocas el app, also recuerda siempre importar en tu modulo COMMONMODULE que es que lleva las funciones como ngif y ngfor

También puedes crear un modulo desde el terminal igual que podías crear el componente y te lo generaba él solito. el comando es :

ng generate module nombre del modulo 
se puede acortar como ng g m nombre

IMPORTANTE cuando pasas un evento a una función en angular, tipo un onclick onchange y tal si necesitas usar el evento tienes que pasarlo a la función SÍ O SÍ de esta manera <form (submit)="agregar( $event)">

con ese dolar event se lo pasas, luego para recibirlo en la función(e:any) lo puedes llamar e event o como quieras, el :any es para que typescript no se enfade porque no sabes que tipo es le dices cualquiera y a correr

En este caso era pasar el event para hacer el preventdefault y que no recargue pero angular tiene un modulo para hacer eso, te vas al modulo, en imports añades FormsModule que ayuda a manejar formularios imagino que además de para el refresh para pasar los datos

Una vez tienes este modulo para prevenir el refresh en el form en lugar de ponerle (submit) le pones (ngSubmit) y hace lo mismo pero sin refresh

Para pasar info desde un formulario debemos establecer su propiedad value con llaves de array, esto le dice que el value va a referenciar a una propiedad, y en el = "" le decimos a qué propiedad de la clase, puede ser una propiedad normal o como en el ejemplo la propiedad de un objeto 
<input type="text" placeholder="Nombre" 
          [value]="nuevo.nombre"/>
eso le dice que el value del formulario es el de esa propiedad, pero ojo que así no se cambia el valor cuando tú escribes

Para cambiarlo deberías poner un evento () puede ser change pero aquí usa submit 
<input type="text" placeholder="Nombre" 
          [value]="nuevo.nombre"
          (input)="cambiarNombre( $event)"
          />
le pasa el evento y luego en la función le dices: this.nuevo.nombre = e.target.value y ya estaría


UNA MANERA MEJOR DE HACER ESTO:
        <input type="text" placeholder="Nombre" 
          name="nombre"
          [(ngModel)] = "nuevo.nombre"
          />
usando ngModel para esto con las llaves le decimos que va a ser igual a eso y con el paréntesis le decimos que está escuchando el cambio , no necesitamos una función que lo cambie, este ngmodel actualiza el valor de la propiedad solito

OJO: LOS PIPES SON | y sirven para transformar visualmente la información, por ejemplo: {{numero | number}} coge el numero y le da formato de numero con las comas en los miles y tal 

Para crear componentes hijos es igual que un componente pero no necesitamos exportarlos porque son componentes que tu solo vas a usar en el componente principal del modulo, luego exportas ese componente nada más 

PASAR DATOS DESDE UN COMPONENTE PADRE
En react usamos las props para pasar datos de padre a hijo, cuando queremos hacer lo mismo en angular dentro de la clase del hijo creamos una variable y le ponemos el decorador @Input, esto le dice que esos datos vendrán desde el padre 
export class PersonajesComponent {

  @Input() personajes: any[] = []
}
Y luego en la etiqueta html del componente hijo en los atributos de etiqueta le pones [propiedad] = "nombre de la propiedad del padre". Así:
  <app-personajes [personajes]="personajes">

Con las [] lo estás asociando imagino para que si cambia en el padre se lo pase al hijo y cambie también, ah vale el nombre entre comillas es el nombre de la propiedad del hijo que lo recibe puedes ponerle un nombre distinto al hijo y ya

PASAR DATOS DEL HIJO AL PADRE
En este caso se usa el decorador @output
para hacer esto en la clase del hijo que manda la info le ponemos el decorador output, damos el nombre del emitter que es como se llama esta familia de métodos 
 @Output() onNuevoPersonaje: EventEmitter<Personaje> = new EventEmitter()
 le dice que es tipo eventEmitter que el objeto que va a recibir es de tipo personaje y que es igual a new event emitter, es decir que cree un emisor de eventos. 
 Luego en la función del hijo que se lanza cuando se pulsa el botón decimos: 
   this.onNuevoPersonaje.emit(this.nuevo)
  Es decir el hijo crea un nuevo personaje con los datos que le manda el formulario usando ngModel y emite ese personaje al padre

  PERO esto lo tienes que recibir desde el componente padre. En el html del padre, donde llama al componente hijo en su etiqueta ponemos: 
  <app-agregar 
     [nuevo]="nuevo"
     (onNuevoPersonaje)="agregarNuevoPersonaje(nuevo)"
    ></app-agregar>
  El onnuevoPersonje es el nombre del emiter, cuando es llamado el padre ejecuta su función agregar personaje. ES IMPORTANTE QUE LE PASEMOS  $event este es el evento que hemos dicho en el hijo que era tipo personaje con <Personaje> al lado de eventEmitter

  Luego en el padre creas la función y en ella actualizas el valor en este caso haces un push en una propiedad que es array

  LOS SERVICIOS: ya lo ha dicho, es lo que hace que no tengamos que usar redux, el servicio es una clase central que contiene la información y a la que todos los componentes de su carpeta tienen acceso, es decir si lo pones en root podrán acceder todos

  Como todo en angular un servicio también es una clase pero con un decorador distinto, este decorador es @Injectable
  Imagino que porque le inyecta la información a los componentes

  Para indicar el servicio nos vamos al module al que corresponde ese servicio y añadimos una propiedad más llamada providers, ahí ponemos todos los servicios que proveen información

  Para que una clase tenga acceso al servicio en su constructor hacemos una inyección de dependencias tal que así: 
  
  constructor(
    private dbzService:DbzService
  ){}
  Si el servicio ya está inicializado porque otra clase hizo lo mismo no se crea uno nuevo sino que ambas acceden a la misma clase y los valores que actualiza una están disponibles para la otra, eso es singletone, la clase solo se crea la primera vez que es llamada y por tanto al actualizarse y estar disponibles para todo el que tenga esa inyección de dependencia todos los componentes acceden a información actualizada y cuando cambia esta ellos se rerenderizan para reflejar el cambio 