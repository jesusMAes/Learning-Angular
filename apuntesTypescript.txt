Estoy viendo el curso de angular y usa typescript, ya lo había usado pero a nivel básico así que tomo nota de esto que no lo había visto antes. 
Imagina esta funcion
function calculaIva(productos: Producto[]): [number, number] {
  let total = 0;
  productos.forEach( ({precio}) => {
    total += precio;
  });

  return [total, total*0.15]
}
es simple solo coge el precio y te devuelve un array con el precio y el precio con iva, lo interesante de typescript es que en productos:Producto[] le estás diciendo que recibe productos y que esos productos son un array de objetos tipo Producto.

La parte en la que pone :[number ,number] le dice que el return es un array con dos elementos de tipo number así es imposible que se te cuele un string en la función y lo rompa todo

Angular usa typescript entre otras cosas porque permite inyección de dependencias, me dice inyección de dependencias le digo yo es que las drogas no...

ya ha empezado la parte de codigo voy a hacer un git init para subir a github esto y meto cada carpeta dentro

algo que he notado es que su html llama a bundle.js, esto es porque estamos usando webpack, webpack coge nuestro código y lo agrupa comprime o como quieras. Esto se ve en el archivo webpack config donde indica el input y el nombre del output

Los tipos de typescript son como con java, lo basico boolean, number, string array... Ante la duda a la documentación. Esto ya lo sabía pero para inicializar variables se puede hacer normal como en javascript y typescript lo infiere o poner :string al lado del nombre de la variable para que sepa que es un string

La diferencia es que si dices nombre = 'paco' javascript sabe que es string pero si dices let nombre; y no inicializas no lo va a saber, con typescript puedes decir let nombre: string y no te dejará meter ahí nada que no sea string

en caso de que quieras que una variable reciba mas de un tipo de dato digamos una variable que pueda tener numeros o texto, que es raro que pase pero bueno eso se hace con el or: 

let hp : number | string 
Y ya deja hacerlo
La siguiente es sobre arrays y objects, es un poco igual, la diferencia aquí es que dentro del array podemos decirle el tipo de datos que acepta el array y en objetos a cada variable puedes decirle también su tipo, basicamente lo mismo que en mongoDB al declarar Schemas le dices el tipo de dato de cada variable en la base de datos

Also typescript infiere el tipo de dato, si dices: let cosas = ['paco', 1] dirá que es de tipo string |number 

Si quieres más de un tipo puedes especificarlo:
let miarray : (boolean | string | number)[] = [true, 'paco', 3]
y te dejará hacerlo sin problema

Para decir el tipo de cada variable de un objeto trabajamos con interfaces, esto se hace poniendo
interface Personaje {
  nombre: string;
  hp: number;
  habilididades: string[]
}

Luego al declarar nuestro objeto le decimos que es de tipo de esa interfaz

const personaje: Personaje = {
  nombre:'paco',
  hp:100,
  habilidades: ['saltar']
}

Y así podremos indicarle el tipo de las propiedades de nuestro objeto, nota que no te deja añadirle más propiedades, para hacer propiedades optativas le ponemos una interrogación junto a el:
interfaz nombre {
  propiedad?: string
}

Las funciones son una movida porque también se les declara el tipo, esto se le declara en la variable, al indicar la variable que recibe le dices de qué tipo es la misma y no te dejará llamarlo si le pasas otra, también le puedes indicar el tipo de dato del return , se hace como vimos antes, con : tipo detrás del paréntesis
function sumar(a:number,b:number){
    return a + b;
}

También se puede hacer en funciones flecha 
const sumarFlecha = (a: number,b: number): number => {
    return a + b
}

Puedes decirle si algun argumento es opcional u obligatorio ya sabes que los argumentos se ponen en orden tipo si pones funcion(a,b,c) y la llamas diciendo funcion(1,2) a será 1 y b 2

Para hacer argumentos obligatorios y opcionales ponemos un ? en el opcional IMPORTANTE EL OPCIONAL SIEMPRE VA AL FINAL

También puedes enviarle un valor por defecto
function multiplicar (numero:number, otroNumero?:number, base:number =2): number {
    return numero * base
}
Ahí le está diciendo que otronumero es opcional y la base si no se envia ninguna es que vale 2

Si no quieres que haya return por ejemplo solo quieres modificar el dato de un objeto pero no necesitas retornarlo pones void
function(argumentos): void {

}

Para añadir una función dentro de un objeto digamos 
const nuevoPersonaje: PersonajeLOR = {
    nombre:'legolas',
    pv: 50,
    mostrarHp() {
        console.log( 'Puntos de vida: ', this.pv)
    }
}

Tienes que añadirla en la interfaz 
interface PersonajeLOR {
    nombre: string;
    pv: number;
    mostrarHP: () => void;
 
}
En el parentesis puedes poner el tipo de los parametros, en realidad las interfaces son como clases chiquitas con propiedades y tal pero con menos funcionalidad que la clase en si 

Si vas a usar un objeto dentro de otro lo declaras en la interfaz y añades los tipos de ese objeto 
interface SuperHeroe {
    nombre: string;
    edad: number;
    direccion: {
        calle:string;
        pais:string;
        ciudad:string
    }
    mostrarDireccion: () => string
}
Aunque normalmente lo que se hace es declarar una interfaz aparte con ese objeto y decirle que dentro de esta es de tipo de esa interfaz
interfaz Direccion {
  calle:string;
  pais:string;
  ciudad:string
}
Y luego en la primera interfaz le dices que dirección es de tipo dirección

La desestructuración de objetos es para acceder a determinada propiedad de un objeto, ya lo había visto en otros asuntos pero recordar va guay

Es basicamente en lugar de acceder a la variable con reproductor.detalles.autor, 
creas una variable sacando los valores de ese objeto
const { } = reproductor,
con lo que le pongas dentro busca la propiedad con ese valor, lo saca y crea una variable con ese valor, luego en lugar de liarte con puntos pones esa variable y ya estaría
por ejemplo: const { volumen, segundo, cancion, detalles} = reproductor

Del mismo modo se puede desestructurar un arreglo
Para desestructurar un objeto se hace con {}, si quieres desestructurar un array y crear una variable por cada objeto del arreglo lo haces con llaves de array []
const dbz: string[] = ['Goku', 'vegeta', 'Trunks']
const [p1, p2, p3] = dbz
Lo hace por posición en el array, no es como en objetos que te busca el valor con ese nombre


GENERICOS: Son elementos que se usan mucho en angular, son una manera de decir qué tipo de datos devuelve una función.
Esto existia también en java, o parecido, mira esta vaina:
function queTipoSoy<T>(argumento:T){
    return argumento;
}
el génerico se escribe con <> y la t es solo para decirle el tipo, el argumento es de ese mismo tipo, de esta manera es como si creases una variable, si invocas la función pasándole un string el tipo será string en el argumento, si la invocas pasando numero el tipo será number porque t será number y el argumento será number, en realidad es como una funcion normal en javascript es rizar el rizo pero bueh, su motivo tendrá

PERO, también puedes indicar a la funcion a la hora de llamarla el tipo que quieres que sea 

let soyExplicito = queTipoSoy<number>('Hola Mundo')
esto no te dejará llamarla porque al parametro le dijiste que : T pero t en este caso será number, si no pones nada t toma el valor de parametro, de esta manera lo fuerzas

Esto es util para recibir las peticiones http porque dependiendo de donde hagas la peticion te da un dato u otro y si estás con typescript te puede dar el error pero no sabes que dato indicarle porque lo mismo te devuelve tal o cual...
Un lio que te cagas. Así puedes resolverlo

DECORADORES DE CLASE 
Ha tardado en llegar por lo que he leído en angular esto es muy importante, es parecido a cuando en java con spring usabas el @
Son indicaciones que permiten cambiar las clases en el momento en que son definidas, cuando usas angular al momento de compilarse aplicar las funciones de ese decorador 
En angular casi todo son clases y el decorador se pone delante de la clase, por ejemplo angular usa el decorador @Component para indicar que es un componente del mismo modo que en react creabamos una clase y decíamos extend react.component, lo mismito es pero con otra forma de escribirlo

Un decorador es como una funcion que se ejecuta sobre tu clase, hasta donde sé no necesito saber la teoria de creación de decoradores, son funciones, por supuesto las que usan angular y otros frameworks son turbocomplejas entonces lo suyo es saber implementarlo. 
PARA TRABAJAR CON DECORADORES TIENES QUE IR A TSCONFIG Y DESCOMENTAR LA FRASE QUE DICE EXPERIMENTALDECORATORS

Los decoradores expanden y añaden funcionalidades. Angular los usa para ver si es un componente, un servicio, una directiva un pipe y demás y así al procesarlo los trata como tal 

ENCADENAMIENTO OPCIONAL
puede pasar que en una interface tengas una propiedad con ? para indicar que es opcional pero si luego tienes una función que la usa y el objeto que le pasas no tiene esa propiedad se te rompe todo 
El encadenamiento opcional hace como un pequeño if: 

function imprimeHijos (pasajero : Pasajero):void {

    const numHijos =  pasajero.hijos?.length || 0
    console.log(numHijos)
}
esa funcion le dice pasajero.hijos y la interrogación le dice, prueba, en caso de que no funcione o se rompa ejecuta el || y le pones ese valor, basicamente cuando trabajas con javascript sueles tenerlo en cuenta tu con un if mirando si existe, con typescript se hace así